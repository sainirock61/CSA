<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="harit.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OPCODE" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field235b0e54">
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field4cc10fef">
	</Field>
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field56147ba0">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register4b2ee614" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register7691d41a" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register37d640e1" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register67ea456e" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register5bc801c1" />
	<Register name="INPR" width="8" initialValue="0" readOnly="false" id="model.module.Register4c104f7f" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register23012fa6" />
	<Register name="OUTR" width="8" initialValue="0" readOnly="false" id="model.module.Registerf7a4d55" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register2655b26f" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register132152fe" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register87c9f52" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<!-- none -->

	<!--............. rams ..........................-->
	<RAM name="M" length="4096" cellSize="16" id="model.module.RAM222aede4" />

	<!--............. set ...........................-->
	<Set name="AC&lt;--0" register="model.module.Register4b2ee614" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet45cab841" />
	<Set name="E&lt;--0" register="model.module.Register67ea456e" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet2dbd0316" />
	<Set name="S&lt;--0" register="model.module.Register132152fe" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSetb3c3403" />

	<!--............. test ..........................-->
	<Test name="if AC(15)=0" register="model.module.Register4b2ee614" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test29c91438" />
	<Test name="if AC(15)=1" register="model.module.Register4b2ee614" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test433fa12e" />
	<Test name="if AC=0" register="model.module.Register4b2ee614" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test32bc8b66" />
	<Test name="if DR=0" register="model.module.Register37d640e1" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test16499366" />
	<Test name="if E=0" register="model.module.Register67ea456e" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test77402d43" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;--AC+1" register="model.module.Register4b2ee614" delta="1" id="model.microinstruction.Increment49c8c454" />
	<Increment name="AR&lt;--AR+1" register="model.module.Register7691d41a" delta="1" id="model.microinstruction.Increment1f7981b0" />
	<Increment name="DR&lt;--DR+1" register="model.module.Register37d640e1" delta="1" id="model.microinstruction.Increment45f1e39a" />
	<Increment name="PC&lt;--PC+1" register="model.module.Register2655b26f" delta="1" id="model.microinstruction.Increment33ade452" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;--shl(AC)" type="logical" source="model.module.Register4b2ee614" destination="model.module.Register4b2ee614" direction="left" distance="1" id="model.microinstruction.Shift2548dd6b" />
	<Shift name="AC&lt;--shr(AC)" type="logical" source="model.module.Register4b2ee614" destination="model.module.Register4b2ee614" direction="right" distance="1" id="model.microinstruction.Shift791b22e4" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;--AC^DR" type="AND" source1="model.module.Register4b2ee614" source2="model.module.Register37d640e1" destination="model.module.Register4b2ee614" id="model.microinstruction.Logical72059dc2" />
	<Logical name="AC&lt;--AC`" type="NOT" source1="model.module.Register4b2ee614" source2="model.module.Register4b2ee614" destination="model.module.Register4b2ee614" id="model.microinstruction.Logical52298d64" />
	<Logical name="E&lt;--E`" type="NOT" source1="model.module.Register67ea456e" source2="model.module.Register67ea456e" destination="model.module.Register67ea456e" id="model.microinstruction.Logical320d2244" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;--AC+DR" type="ADD" source1="model.module.Register4b2ee614" source2="model.module.Register37d640e1" destination="model.module.Register4b2ee614" id="model.microinstruction.Arithmetice3ca018" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0-7)&lt;--INPR" source="model.module.Register4c104f7f" srcStartBit="0" dest="model.module.Register4b2ee614" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR6f4340bd" />
	<TransferRtoR name="AC(15)&lt;--E" source="model.module.Register67ea456e" srcStartBit="0" dest="model.module.Register4b2ee614" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR159136c4" />
	<TransferRtoR name="AC&lt;--DR" source="model.module.Register37d640e1" srcStartBit="0" dest="model.module.Register4b2ee614" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR7ec6780e" />
	<TransferRtoR name="AR&lt;--IR(0-11)" source="model.module.Register23012fa6" srcStartBit="0" dest="model.module.Register7691d41a" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR606d8511" />
	<TransferRtoR name="AR&lt;--PC" source="model.module.Register2655b26f" srcStartBit="0" dest="model.module.Register7691d41a" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR74d2cb6" />
	<TransferRtoR name="E&lt;--AC(0)" source="model.module.Register4b2ee614" srcStartBit="0" dest="model.module.Register67ea456e" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1b760d8d" />
	<TransferRtoR name="I&lt;--IR(15)" source="model.module.Register23012fa6" srcStartBit="15" dest="model.module.Register5bc801c1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR56bd10e5" />
	<TransferRtoR name="OUTR&lt;--AC(0-7)" source="model.module.Register4b2ee614" srcStartBit="0" dest="model.module.Registerf7a4d55" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR72863104" />
	<TransferRtoR name="PC&lt;--AR" source="model.module.Register7691d41a" srcStartBit="0" dest="model.module.Register2655b26f" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR5a74522e" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode(IR)" ir="model.module.Register23012fa6" id="model.microinstruction.Decode21078519" />

	<!--............. set condition bit .............-->
	<!-- none -->

	<!--............. io ............................-->
	<IO name="INP" direction="input" type="integer" buffer="model.module.Register4c104f7f" connection="[Console]" id="model.microinstruction.IO653e3080" />
	<IO name="OUT" direction="output" type="integer" buffer="model.module.Registerf7a4d55" connection="[Console]" id="model.microinstruction.IO2f57f87b" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;--M[AR]" direction="read" memory="model.module.RAM222aede4" data="model.module.Register37d640e1" address="model.module.Register7691d41a" id="model.microinstruction.MemoryAccess599a5635" />
	<MemoryAccess name="IR&lt;--M[AR]" direction="read" memory="model.module.RAM222aede4" data="model.module.Register23012fa6" address="model.module.Register7691d41a" id="model.microinstruction.MemoryAccess7a61b8e1" />
	<MemoryAccess name="M[AR]&lt;--AC" direction="write" memory="model.module.RAM222aede4" data="model.module.Register4b2ee614" address="model.module.Register7691d41a" id="model.microinstruction.MemoryAccess79c031bd" />
	<MemoryAccess name="M[AR]&lt;--DR" direction="write" memory="model.module.RAM222aede4" data="model.module.Register37d640e1" address="model.module.Register7691d41a" id="model.microinstruction.MemoryAccess64725cd1" />
	<MemoryAccess name="M[AR]&lt;--PC" direction="write" memory="model.module.RAM222aede4" data="model.module.Register2655b26f" address="model.module.Register7691d41a" id="model.microinstruction.MemoryAccess6f529594" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End18839e2f" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR74d2cb6" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess7a61b8e1" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR606d8511" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR56bd10e5" />
		<Microinstruction microRef="model.microinstruction.Decode21078519" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#9aeb86" assemblyColors="#9aeb86" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR72863104" />
		<Microinstruction microRef="model.microinstruction.IO2f57f87b" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#c9de9a" assemblyColors="#c9de9a" >
		<Microinstruction microRef="model.microinstruction.IO653e3080" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR6f4340bd" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#aeb5a0" assemblyColors="#aeb5a0" >
		<Microinstruction microRef="model.microinstruction.Logical320d2244" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#f6afa1" assemblyColors="#f6afa1" >
		<Microinstruction microRef="model.microinstruction.Logical52298d64" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="7020" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#96ce96" assemblyColors="#96ce96" >
		<Microinstruction microRef="model.microinstruction.Increment49c8c454" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7010" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#f5cce0" assemblyColors="#f5cce0" >
		<Microinstruction microRef="model.microinstruction.Test29c91438" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="7008" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#82c6d8" assemblyColors="#82c6d8" >
		<Microinstruction microRef="model.microinstruction.Test433fa12e" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="7004" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#d6faaa" assemblyColors="#d6faaa" >
		<Microinstruction microRef="model.microinstruction.Test32bc8b66" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="7002" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#d083e1" assemblyColors="#d083e1" >
		<Microinstruction microRef="model.microinstruction.Test77402d43" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b994bd" assemblyColors="#b994bd" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR1b760d8d" />
		<Microinstruction microRef="model.microinstruction.Shift791b22e4" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR159136c4" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#948496" assemblyColors="#948496" >
		<Microinstruction microRef="model.microinstruction.CpusimSetb3c3403" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="7400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#d4d4a8" assemblyColors="#d4d4a8" >
		<Microinstruction microRef="model.microinstruction.CpusimSet2dbd0316" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#c6ced6" assemblyColors="#c6ced6" >
		<Microinstruction microRef="model.microinstruction.CpusimSet45cab841" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#939fa4" assemblyColors="#939fa4" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR1b760d8d" />
		<Microinstruction microRef="model.microinstruction.Shift2548dd6b" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR159136c4" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="6" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#e3909a #9fe8c2" assemblyColors="#e3909a #9fe8c2" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess599a5635" />
		<Microinstruction microRef="model.microinstruction.Increment45f1e39a" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess64725cd1" />
		<Microinstruction microRef="model.microinstruction.Test16499366" />
		<Microinstruction microRef="model.microinstruction.Increment33ade452" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="5" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#c9c7d9 #c4c092" assemblyColors="#c9c7d9 #c4c092" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6f529594" />
		<Microinstruction microRef="model.microinstruction.Increment1f7981b0" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5a74522e" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#9dc9f8 #d7d3bb" assemblyColors="#9dc9f8 #d7d3bb" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR5a74522e" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#80ccf7 #b0a6ed" assemblyColors="#80ccf7 #b0a6ed" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess79c031bd" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f39996 #e6c2cf" assemblyColors="#f39996 #e6c2cf" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess599a5635" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7ec6780e" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#c4aabf #ecf4c0" assemblyColors="#c4aabf #ecf4c0" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess599a5635" />
		<Microinstruction microRef="model.microinstruction.Arithmetice3ca018" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#fbe59d #a9dcb9" assemblyColors="#fbe59d #a9dcb9" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess599a5635" />
		<Microinstruction microRef="model.microinstruction.Logical72059dc2" />
		<Microinstruction microRef="model.microinstruction.End18839e2f" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM222aede4" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->
	<ProgramCounterInfo programCounter="model.module.Register2655b26f" />

</Machine>
